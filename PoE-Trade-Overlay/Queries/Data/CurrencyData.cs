// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PoE_Trade_Overlay.Queries.Data;
//
//    var currencyData = CurrencyData.FromJson(jsonString);

namespace PoE_Trade_Overlay.Queries.Data
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CurrencyData
    {
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public List<CurrencyDataResult> Result { get; set; }
    }

    public partial class CurrencyDataResult
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("entries", NullValueHandling = NullValueHandling.Ignore)]
        public List<CurrencyDataEntry> Entries { get; set; }
    }

    public partial class CurrencyDataEntry
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public string Image { get; set; }
    }

    public partial class CurrencyData
    {
        public static CurrencyData FromJson(string json) => JsonConvert.DeserializeObject<CurrencyData>(json, PoE_Trade_Overlay.Queries.Data.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CurrencyData self) => JsonConvert.SerializeObject(self, PoE_Trade_Overlay.Queries.Data.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
