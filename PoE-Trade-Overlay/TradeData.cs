// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PoE_Trade_Overlay;
//
//    var tradeData = TradeData.FromJson(jsonString);

namespace PoE_Trade_Overlay
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TradeData
    {
        [JsonProperty("result", NullValueHandling = NullValueHandling.Ignore)]
        public List<Result> Result { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("listing", NullValueHandling = NullValueHandling.Ignore)]
        public Listing Listing { get; set; }

        [JsonProperty("item", NullValueHandling = NullValueHandling.Ignore)]
        public Item Item { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("verified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Verified { get; set; }

        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public long? W { get; set; }

        [JsonProperty("h", NullValueHandling = NullValueHandling.Ignore)]
        public long? H { get; set; }

        [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Icon { get; set; }

        [JsonProperty("league", NullValueHandling = NullValueHandling.Ignore)]
        public string League { get; set; }

        [JsonProperty("sockets", NullValueHandling = NullValueHandling.Ignore)]
        public List<Socket> Sockets { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("typeLine", NullValueHandling = NullValueHandling.Ignore)]
        public string TypeLine { get; set; }

        [JsonProperty("identified", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Identified { get; set; }

        [JsonProperty("ilvl", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ilvl { get; set; }

        [JsonProperty("note", NullValueHandling = NullValueHandling.Ignore)]
        public string Note { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public List<Property> Properties { get; set; }

        [JsonProperty("frameType", NullValueHandling = NullValueHandling.Ignore)]
        public long? FrameType { get; set; }

        [JsonProperty("extended", NullValueHandling = NullValueHandling.Ignore)]
        public Extended Extended { get; set; }

        [JsonProperty("support", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Support { get; set; }

        [JsonProperty("corrupted", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Corrupted { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public List<AdditionalProperty> AdditionalProperties { get; set; }

        [JsonProperty("requirements", NullValueHandling = NullValueHandling.Ignore)]
        public List<Property> Requirements { get; set; }

        [JsonProperty("secDescrText", NullValueHandling = NullValueHandling.Ignore)]
        public string SecDescrText { get; set; }

        [JsonProperty("explicitMods", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ExplicitMods { get; set; }

        [JsonProperty("descrText", NullValueHandling = NullValueHandling.Ignore)]
        public string DescrText { get; set; }

        [JsonProperty("hybrid", NullValueHandling = NullValueHandling.Ignore)]
        public Hybrid Hybrid { get; set; }

        [JsonProperty("implicitMods", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ImplicitMods { get; set; }

        [JsonProperty("flavourText", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FlavourText { get; set; }
    }

    public partial class AdditionalProperty
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<Value>> Values { get; set; }

        [JsonProperty("displayMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayMode { get; set; }

        [JsonProperty("progress", NullValueHandling = NullValueHandling.Ignore)]
        public double? Progress { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public long? Type { get; set; }
    }

    public partial class Extended
    {
        [JsonProperty("ev", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ev { get; set; }

        [JsonProperty("ev_aug", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EvAug { get; set; }

        [JsonProperty("es", NullValueHandling = NullValueHandling.Ignore)]
        public long? Es { get; set; }

        [JsonProperty("es_aug", NullValueHandling = NullValueHandling.Ignore)]
        public bool? EsAug { get; set; }

        [JsonProperty("mods", NullValueHandling = NullValueHandling.Ignore)]
        public Mods Mods { get; set; }

        //[JsonProperty("hashes", NullValueHandling = NullValueHandling.Ignore)]
        //public Hashes Hashes { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public string Text { get; set; }

        [JsonProperty("dps", NullValueHandling = NullValueHandling.Ignore)]
        public double? Dps { get; set; }

        [JsonProperty("pdps", NullValueHandling = NullValueHandling.Ignore)]
        public double? Pdps { get; set; }

        [JsonProperty("edps", NullValueHandling = NullValueHandling.Ignore)]
        public long? Edps { get; set; }

        [JsonProperty("dps_aug", NullValueHandling = NullValueHandling.Ignore)]
        public bool? DpsAug { get; set; }

        [JsonProperty("pdps_aug", NullValueHandling = NullValueHandling.Ignore)]
        public bool? PdpsAug { get; set; }
    }

    public partial class Hashes
    {
        [JsonProperty("explicit", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<ExplicitUnion>> Explicit { get; set; }

        [JsonProperty("implicit", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<ExplicitUnion>> Implicit { get; set; }
    }

    public partial class Mods
    {
        [JsonProperty("explicit", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExplicitClass> Explicit { get; set; }

        [JsonProperty("implicit", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExplicitClass> Implicit { get; set; }
    }

    public partial class ExplicitClass
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("tier", NullValueHandling = NullValueHandling.Ignore)]
        public string Tier { get; set; }

        [JsonProperty("magnitudes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Magnitude> Magnitudes { get; set; }
    }

    public partial class Magnitude
    {
        [JsonProperty("hash", NullValueHandling = NullValueHandling.Ignore)]
        public string Hash { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public long? Min { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public long? Max { get; set; }
    }

    public partial class Hybrid
    {
        [JsonProperty("isVaalGem", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsVaalGem { get; set; }

        [JsonProperty("baseTypeName", NullValueHandling = NullValueHandling.Ignore)]
        public string BaseTypeName { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public List<Property> Properties { get; set; }

        [JsonProperty("explicitMods", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ExplicitMods { get; set; }

        [JsonProperty("secDescrText", NullValueHandling = NullValueHandling.Ignore)]
        public string SecDescrText { get; set; }
    }

    public partial class Property
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<Value>> Values { get; set; }

        [JsonProperty("displayMode", NullValueHandling = NullValueHandling.Ignore)]
        public long? DisplayMode { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public long? Type { get; set; }
    }

    public partial class Socket
    {
        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public long? Group { get; set; }

        [JsonProperty("attr", NullValueHandling = NullValueHandling.Ignore)]
        public string Attr { get; set; }

        [JsonProperty("sColour", NullValueHandling = NullValueHandling.Ignore)]
        public string SColour { get; set; }
    }

    public partial class Listing
    {
        [JsonProperty("method", NullValueHandling = NullValueHandling.Ignore)]
        public string Method { get; set; }

        [JsonProperty("indexed", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? Indexed { get; set; }

        [JsonProperty("stash", NullValueHandling = NullValueHandling.Ignore)]
        public Stash Stash { get; set; }

        [JsonProperty("whisper", NullValueHandling = NullValueHandling.Ignore)]
        public string Whisper { get; set; }

        [JsonProperty("account", NullValueHandling = NullValueHandling.Ignore)]
        public Account Account { get; set; }

        [JsonProperty("price", NullValueHandling = NullValueHandling.Ignore)]
        public Price Price { get; set; }
    }

    public partial class Account
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("lastCharacterName", NullValueHandling = NullValueHandling.Ignore)]
        public string LastCharacterName { get; set; }

        [JsonProperty("online", NullValueHandling = NullValueHandling.Ignore)]
        public Online Online { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }
    }

    public partial class Online
    {
        [JsonProperty("league", NullValueHandling = NullValueHandling.Ignore)]
        public string League { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }
    }

    public partial class Price
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("amount", NullValueHandling = NullValueHandling.Ignore)]
        public long? Amount { get; set; }

        [JsonProperty("currency", NullValueHandling = NullValueHandling.Ignore)]
        public string Currency { get; set; }
    }

    public partial class Stash
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public long? X { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public long? Y { get; set; }
    }

    public partial struct Value
    {
        public long? Integer;
        public string String;

        public static implicit operator Value(long Integer) => new Value { Integer = Integer };
        public static implicit operator Value(string String) => new Value { String = String };
    }

    public partial struct ExplicitUnion
    {
        public List<long> IntegerArray;
        public string String;

        public static implicit operator ExplicitUnion(List<long> IntegerArray) => new ExplicitUnion { IntegerArray = IntegerArray };
        public static implicit operator ExplicitUnion(string String) => new ExplicitUnion { String = String };
    }

    public partial class TradeData
    {
        public static TradeData FromJson(string json) => JsonConvert.DeserializeObject<TradeData>(json, PoE_Trade_Overlay.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TradeData self) => JsonConvert.SerializeObject(self, PoE_Trade_Overlay.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ValueConverter.Singleton,
                ExplicitUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ValueConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Value) || t == typeof(Value?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Value { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Value { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Value");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Value)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Value");
        }

        public static readonly ValueConverter Singleton = new ValueConverter();
    }

    internal class ExplicitUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExplicitUnion) || t == typeof(ExplicitUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ExplicitUnion { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<List<long>>(reader);
                    return new ExplicitUnion { IntegerArray = arrayValue };
            }
            //throw new Exception("Cannot unmarshal type ExplicitUnion");
            return null;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ExplicitUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.IntegerArray != null)
            {
                serializer.Serialize(writer, value.IntegerArray);
                return;
            }
            throw new Exception("Cannot marshal type ExplicitUnion");
        }

        public static readonly ExplicitUnionConverter Singleton = new ExplicitUnionConverter();
    }
}
